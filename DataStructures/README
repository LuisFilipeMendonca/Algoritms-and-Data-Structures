SINGLY LINKED LISTS

    A data structure that contains a head, tail and length property.
    Linked Lists consit of nodes, and each node has a value and a pointer to another node or null.
    Are an excellent alternative to arrays when insertion and deletion at the beginning are frequently required.

Comparisons with Arrays:

    Lists:
        - do not have indexes.
        - connected via nodes with a next pointer.
        - random access is not allowed.

    Arrays:
        - Indexed in order.
        - Insertion and deletion can be expensive.
        - Can quickly be accessed at a specific index.

DOUBLY LINKED LISTS

    Almost identical to Singly Linked Lists, except every node has another pointer, to the previous node.
    Better than Singly Linked Lists for finding nodes and can be done in half the time.
    They do take up more memory considering the extra pointer.

STACK

    Stacks are a LIFO data structure where the last value in is always the first one out.
    Stacks are used to handle function invocations (the call stack), for operations like undo/redo, and for routing (back/forward) and much more!
    They are not a built in structure in Javascript but are relatively simple to implement.
    Can be implemented with arrays with push and pop or with shift and unshift.

QUEUES

    Queues are a FIFO data structure, all elements are first in first out.
    Queues are useful for precessing tasks and are foundational for more complex data structures.
    Insertion and Removal can be done in O(1).
    Can be implemented with arrays with push and shift or with unshift and pop.

TREES

    Trees are non-linear data structures that contain a root and child nodes.
    Root -> The top node in a tree.
    Child -> A node directly connected to another node when moving away from the Root.
    Parent -> The converse notion of a child.
    Siblings -> A group of nodes with the same parent.
    Leaf -> A node with no children.
    Edge -> The connection between one node and another.

BINARY TREE

    Can have values of any type, but at most two children for each parent.

BINARY SEARCH TREE

    Every parent node has at most two children.
    Every node to the left of a parent node is always less than the parent.
    Every node to the right of a parent node is always greater than the parent.

TREE TRAVERSAL (BFS vs DFS)

    Time complexity is the same on both.
    Depth first take more space for long trees.
    DFS InOrder => use when need the data in order.
    DFS PreOrder => useful when you need to recreate the tree (export the tree structure).

HEAP

    Very similar to a binary search tree, but with some different rules.
    In a MaxBinaryHeap, parent nodes are always larger than child nodes, In a MinBinaryHeap, parent nodes are always smaller than child nodes.

MAX BINARY HEAP

    Each parent has a most two child nodes.
    The value of each parent node is always greater that its child nodes.
    In a max binary heap the parent is greater than the children, but there are no guarantees between sibling nodes.
    A binary heap is as compact as possible. All the children of each node are as full as they can be and left children are filled out first.

PRIORITY QUEUE

    A data structure where each element has a priority.
    Elemenets. with higher priorities are served before elements with lower priorities.

HASH TABLES

    Hash tables are used to store key-value pairs.
    They are like arrays, but the keys are not ordered.
    Unlinke arrays, hash tables are fast for all of the following operations: finding values, adding new values and removing values.

GRAPHS

    A graph data structure consists of a finite (and possibly mutable) set of vetices or nodes or points, together with a set of unordered pairs of these vertices for an undirected graph or a set of a ordered pairs for a directed graph.
    Vertex -> a node.
    Edge -> connection between nodes.
    Undericted graph -> two way connections between nodes.
    Directed graph -> direction assign to an edge.
    Weighted graph -> have a value associated to an edge.
