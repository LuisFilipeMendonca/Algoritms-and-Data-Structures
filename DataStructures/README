SINGLY LINKED LISTS

    A data structure that contains a head, tail and length property.
    Linked Lists consit of nodes, and each node has a value and a pointer to another node or null.
    Are an excellent alternative to arrays when insertion and deletion at the beginning are frequently required.

Comparisons with Arrays:

    Lists:
        - do not have indexes.
        - connected via nodes with a next pointer.
        - random access is not allowed.

    Arrays:
        - Indexed in order.
        - Insertion and deletion can be expensive.
        - Can quickly be accessed at a specific index.

DOUBLY LINKED LISTS

    Almost identical to Singly Linked Lists, except every node has another pointer, to the previous node.
    Better than Singly Linked Lists for finding nodes and can be done in half the time.
    They do take up more memory considering the extra pointer.

STACK

    Stacks are a LIFO data structure where the last value in is always the first one out.
    Stacks are used to handle function invocations (the call stack), for operations like undo/redo, and for routing (back/forward) and much more!
    They are not a built in structure in Javascript but are relatively simple to implement.
    Can be implemented with arrays with push and pop or with shift and unshift.

QUEUES

    Queues are a FIFO data structure, all elements are first in first out.
    Queues are useful for precessing tasks and are foundational for more complex data structures.
    Insertion and Removal can be done in O(1).
    Can be implemented with arrays with push and shift or with unshift and pop.
